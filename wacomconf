#!/usr/bin/env python3
#	wacomconf - Easy Wacom tablet configuration script
#	Copyright (C) 2020-2020 Johannes Bauer
#
#	This file is part of wacomconf.
#
#	wacomconf is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	wacomconf is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with wacomconf; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import json
import re
import subprocess
import fractions
from FriendlyArgumentParser import FriendlyArgumentParser
from CmdlineEscape import CmdlineEscape

parser = FriendlyArgumentParser(description = "Frontend to configure Wacom tablets easily.")
parser.add_argument("-r", "--reset", action = "store_true", help = "Try to reset Wacom tablet resolution to default.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("conf_file", help = "JSON configuration file that contains configuration.")
args = parser.parse_args(sys.argv[1:])

class Linear():
	def __init__(self, slope, offset):
		self._slope = slope
		self._offset = offset

	@classmethod
	def create_from_mapping(cls, src1, dst1, src2, dst2):
		slope = (dst2 - dst1) / (src2 - src1)
		offset = dst1 - (slope * src1)
		return cls(slope = slope, offset = offset)

	def apply(self, x):
		return (x * self._slope) + self._offset

	def __str__(self):
		return "Linear<%.3f x + %.3f>" % (self._slope, self._offset)

class TransformationMatrix():
	def __init__(self, x, y):
		self._x = x
		self._y = y

	@classmethod
	def create_from_mapping(cls, src_point1, dst_point1, src_point2, dst_point2):
		return cls(x = Linear.create_from_mapping(src_point1[0], dst_point1[0], src_point2[0], dst_point2[0]), y = Linear.create_from_mapping(src_point1[1], dst_point1[1], src_point2[1], dst_point2[1]))

	def apply(self, point):
		return (self._x.apply(point[0]), self._y.apply(point[1]))

	def __str__(self):
		return "Xform<X %s, Y %s>" % (self._x, self._y)

class WacomConfigurator():
	_XDPYINFO_DIMENSIONS = re.compile("^\s+dimensions:\s+(?P<x>\d+)x(?P<y>\d+) pixels", flags = re.MULTILINE)
	def __init__(self, args):
		self._args = args
		with open(self._args.conf_file) as f:
			self._config = json.load(f)

	def _get_screen_resolution(self):
		output = subprocess.check_output([ "xdpyinfo" ]).decode()
		match = self._XDPYINFO_DIMENSIONS.search(output)
		match = match.groupdict()
		return (int(match["x"]), int(match["y"]))

	def _ratio_str(self, ratio):
		fract = fractions.Fraction(round(ratio[0]), round(ratio[1]))
		return "%d : %d" % (fract.numerator, fract.denominator)

	def _reset(self):
		# "Area" gives point on tablet that corresponds to upper left screen
		# coordinates and lower right screen coordinates
		subprocess.check_call([ "xsetwacom", "--set", self._config["name"], "Area", "0 0 %d %d" % (self._config["physical_dimension"][0], self._config["physical_dimension"][1])])

	def run(self):
		screen_resolution = self._get_screen_resolution()
		if self._args.verbose >= 1:
			print("Screen resolution: %d x %d (ratio %s)" % (screen_resolution[0], screen_resolution[1], self._ratio_str(screen_resolution)))
			print("Tablet physical aspect ratio: %s" % (self._ratio_str(self._config["physical_dimension"])))
		if self._args.reset:
			self._reset()
		else:
			if "tablet_width" in self._config:
				tablet_width = self._config["tablet_width"]
				tablet_height = tablet_width / self._config["physical_dimension"][0] * self._config["physical_dimension"][1]
			elif "tablet_height" in self._config:
				tablet_height = self._config["tablet_height"]
				tablet_width = tablet_height * self._config["physical_dimension"][0] / self._config["physical_dimension"][1]
			bottom_right = (self._config["screen_offset_top_left"][0] + tablet_width, self._config["screen_offset_top_left"][1] + tablet_height)
			if self._args.verbose >= 1:
				print("Tablet offset: Upper left corner at %d, %d, lower right corner at %d, %d" % (self._config["screen_offset_top_left"][0], self._config["screen_offset_top_left"][1], bottom_right[0], bottom_right[1]))
				print("Tablet mapping screen area: %d x %d pixels (ratio %s)" % (tablet_width, tablet_height, self._ratio_str((tablet_width, tablet_height))))

			xform = TransformationMatrix.create_from_mapping(self._config["screen_offset_top_left"], (0, 0), bottom_right, self._config["physical_dimension"])
			area1 = xform.apply((0, 0))
			area2 = xform.apply(screen_resolution)
			if self._args.verbose >= 2:
				print("Transformation matrix: %s" % (xform))
				print("Mapped upper left of screen in tablet coordinates: %.0f, %.0f" % (area1[0], area1[1]))
				print("Mapped lower right of screen in tablet coordinates: %.0f, %.0f" % (area2[0], area2[1]))

			area_str = "%.0f %.0f %.0f %.0f" % (area1[0], area1[1], area2[0], area2[1])
			cmd = [ "xsetwacom", "--set", self._config["name"], "Area", area_str ]
			subprocess.check_call(cmd)
			if self._args.verbose >= 3:
				print("Command: %s" % (CmdlineEscape().cmdline(cmd)))

conf = WacomConfigurator(args)
conf.run()
